{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramya\\\\FSD_project\\\\finalproject_frontend\\\\src\\\\Components\\\\Adminmoviepage\\\\Adminmoviepage.jsx\",\n  _s = $RefreshSig$();\n// AdminMoviesPage.jsx\n\nimport React, { useState, useEffect } from \"react\";\nimport Movieform from \"./Movieform/Movi\";\nimport Movies from \"../Movies/Movies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminMoviesPage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  useEffect(() => {\n    // Fetch movies when the component mounts\n    fetchAllMovies();\n  }, []);\n  const fetchAllMovies = async () => {\n    try {\n      const response = await fetch(\"http://your-api-url/movies\"); // Replace with your actual API endpoint\n      if (response.ok) {\n        const data = await response.json();\n        setMovies(data);\n      } else {\n        console.error(\"Failed to fetch movies:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch movies:\", error.message);\n    }\n  };\n  const handleAddMovie = async movieData => {\n    try {\n      const response = await fetch(\"http://your-api-url/movies\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(movieData)\n      }); // Replace with your actual API endpoint\n      if (response.ok) {\n        fetchAllMovies();\n      } else {\n        console.error(\"Failed to add movie:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Failed to add movie:\", error.message);\n    }\n  };\n  const handleUpdateMovie = async movieData => {\n    try {\n      const response = await fetch(`http://your-api-url/movies/${movieData.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(movieData)\n      }); // Replace with your actual API endpoint\n      if (response.ok) {\n        fetchAllMovies();\n        setSelectedMovie(null); // Clear selected movie after updating\n      } else {\n        console.error(\"Failed to update movie:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Failed to update movie:\", error.message);\n    }\n  };\n  const handleDeleteMovie = async movieId => {\n    try {\n      const response = await fetch(`http://your-api-url/movies/${movieId}`, {\n        method: \"DELETE\"\n      }); // Replace with your actual API endpoint\n      if (response.ok) {\n        fetchAllMovies();\n      } else {\n        console.error(\"Failed to delete movie:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Failed to delete movie:\", error.message);\n    }\n  };\n  const handleEditMovie = movie => {\n    setSelectedMovie(movie);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Movies Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieForm, {\n      onSubmit: selectedMovie ? handleUpdateMovie : handleAddMovie,\n      initialData: selectedMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {\n      movies: movies,\n      onEdit: handleEditMovie,\n      onDelete: handleDeleteMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminMoviesPage, \"PO+XgOji7E32nFJj3H5UPLPJ7w4=\");\n_c = AdminMoviesPage;\nexport default AdminMoviesPage;\nvar _c;\n$RefreshReg$(_c, \"AdminMoviesPage\");","map":{"version":3,"names":["React","useState","useEffect","Movieform","Movies","jsxDEV","_jsxDEV","AdminMoviesPage","_s","movies","setMovies","selectedMovie","setSelectedMovie","fetchAllMovies","response","fetch","ok","data","json","console","error","statusText","message","handleAddMovie","movieData","method","headers","body","JSON","stringify","handleUpdateMovie","id","handleDeleteMovie","movieId","handleEditMovie","movie","children","fileName","_jsxFileName","lineNumber","columnNumber","MovieForm","onSubmit","initialData","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/ramya/FSD_project/finalproject_frontend/src/Components/Adminmoviepage/Adminmoviepage.jsx"],"sourcesContent":["// AdminMoviesPage.jsx\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Movieform from \"./Movieform/Movi\";\r\nimport Movies from \"../Movies/Movies\";\r\n\r\nconst AdminMoviesPage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch movies when the component mounts\r\n    fetchAllMovies();\r\n  }, []);\r\n\r\n  const fetchAllMovies = async () => {\r\n    try {\r\n      const response = await fetch(\"http://your-api-url/movies\"); // Replace with your actual API endpoint\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setMovies(data);\r\n      } else {\r\n        console.error(\"Failed to fetch movies:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch movies:\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleAddMovie = async (movieData) => {\r\n    try {\r\n      const response = await fetch(\"http://your-api-url/movies\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(movieData),\r\n      }); // Replace with your actual API endpoint\r\n      if (response.ok) {\r\n        fetchAllMovies();\r\n      } else {\r\n        console.error(\"Failed to add movie:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to add movie:\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleUpdateMovie = async (movieData) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://your-api-url/movies/${movieData.id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(movieData),\r\n        }\r\n      ); // Replace with your actual API endpoint\r\n      if (response.ok) {\r\n        fetchAllMovies();\r\n        setSelectedMovie(null); // Clear selected movie after updating\r\n      } else {\r\n        console.error(\"Failed to update movie:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to update movie:\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleDeleteMovie = async (movieId) => {\r\n    try {\r\n      const response = await fetch(`http://your-api-url/movies/${movieId}`, {\r\n        method: \"DELETE\",\r\n      }); // Replace with your actual API endpoint\r\n      if (response.ok) {\r\n        fetchAllMovies();\r\n      } else {\r\n        console.error(\"Failed to delete movie:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to delete movie:\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleEditMovie = (movie) => {\r\n    setSelectedMovie(movie);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Admin Movies Page</h2>\r\n      <MovieForm\r\n        onSubmit={selectedMovie ? handleUpdateMovie : handleAddMovie}\r\n        initialData={selectedMovie}\r\n      />\r\n      <Movies\r\n        movies={movies}\r\n        onEdit={handleEditMovie}\r\n        onDelete={handleDeleteMovie}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminMoviesPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}