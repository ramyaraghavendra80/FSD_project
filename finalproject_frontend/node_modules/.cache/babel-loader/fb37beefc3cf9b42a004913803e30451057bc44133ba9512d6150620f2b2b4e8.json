{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramya\\\\FSD_project\\\\finalproject_frontend\\\\src\\\\Components\\\\Forgotpassword\\\\Forgotpassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ForgotPassword() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [resetSent, setResetSent] = useState(false);\n  const handleReset = async () => {\n    try {\n      const response = await fetch(\"http://your-api-url/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setResetSent(true);\n      } else {\n        console.error(\"Error sending password reset email: \", data.error);\n      }\n    } catch (error) {\n      console.error(\"Error sending password reset email: \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forgot-password-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Forgot Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-body\",\n      children: [resetSent ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"An email with password reset instructions has been sent to your inbox.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enter your email address to receive a password reset link:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          placeholder: \"Enter your email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          children: \"Send Reset Link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"Back to Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(ForgotPassword, \"wP9zKvoSggggZBkMXVIl9XvR8FM=\");\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","ForgotPassword","_s","email","setEmail","resetSent","setResetSent","handleReset","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","to","_c","$RefreshReg$"],"sources":["C:/Users/ramya/FSD_project/finalproject_frontend/src/Components/Forgotpassword/Forgotpassword.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ForgotPassword() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [resetSent, setResetSent] = useState(false);\r\n\r\n  const handleReset = async () => {\r\n    try {\r\n      const response = await fetch(\"http://your-api-url/reset-password\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setResetSent(true);\r\n      } else {\r\n        console.error(\"Error sending password reset email: \", data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending password reset email: \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"forgot-password-container\">\r\n      <h2>Forgot Password</h2>\r\n      <div className=\"reset-body\">\r\n        {resetSent ? (\r\n          <p>An email with password reset instructions has been sent to your inbox.</p>\r\n        ) : (\r\n          <>\r\n            <p>Enter your email address to receive a password reset link:</p>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Enter your email\"\r\n            />\r\n            <button onClick={handleReset}>Send Reset Link</button>\r\n          </>\r\n        )}\r\n        <p>\r\n          <Link to=\"/login\">Back to Login</Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}