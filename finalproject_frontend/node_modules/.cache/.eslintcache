[{"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\index.js":"1","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\App.js":"2","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\reportWebVitals.js":"3","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Home\\Home.jsx":"4","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Forgotpassword\\Forgotpassword.jsx":"5","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Movies\\Movies.jsx":"6","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Moviefilter\\Moviefilter.jsx":"7","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Login\\Login.jsx":"8","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Signup\\Signup.jsx":"9","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Moviedetail\\Moviedetail.jsx":"10","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Navbar\\Navbar.jsx":"11","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\SeatBooking\\SeatBooking.jsx":"12","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Ticket\\Ticket.jsx":"13","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\UserProfile\\UserProfile.jsx":"14"},{"size":535,"mtime":1695235675761,"results":"15","hashOfConfig":"16"},{"size":2233,"mtime":1698913710342,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1692167623563,"results":"18","hashOfConfig":"16"},{"size":1960,"mtime":1700451872992,"results":"19","hashOfConfig":"16"},{"size":1593,"mtime":1692460146714,"results":"20","hashOfConfig":"16"},{"size":460,"mtime":1695122715481,"results":"21","hashOfConfig":"16"},{"size":3341,"mtime":1696415850516,"results":"22","hashOfConfig":"16"},{"size":3537,"mtime":1696268008707,"results":"23","hashOfConfig":"16"},{"size":5412,"mtime":1696271275008,"results":"24","hashOfConfig":"16"},{"size":1584,"mtime":1695884969404,"results":"25","hashOfConfig":"16"},{"size":985,"mtime":1700654256322,"results":"26","hashOfConfig":"16"},{"size":13309,"mtime":1700455133428,"results":"27","hashOfConfig":"16"},{"size":4281,"mtime":1696516469866,"results":"28","hashOfConfig":"16"},{"size":6841,"mtime":1696529692468,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yvzemr",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\index.js",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\App.js",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Home\\Home.jsx",[],[],["77","78","79","80","81","82"],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Forgotpassword\\Forgotpassword.jsx",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Movies\\Movies.jsx",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Moviefilter\\Moviefilter.jsx",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Login\\Login.jsx",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Signup\\Signup.jsx",["83","84"],[],"import Button from \"react-bootstrap/Button\";\r\nimport \"./Signup.css\";\r\nimport { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, ErrorMessage, Field, Form } from \"formik\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\nfunction Signup() {\r\n  const navigate = useNavigate();\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    username: \"\",\r\n  };\r\n  const submitForm = (values, props) => {\r\n    console.log(values);\r\n    props.resetForm();\r\n    console.log(props);\r\n    fetch(\"http://127.0.0.1:8000/project/signup/\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 201) {\r\n          navigate(\"/login\");\r\n        } else {\r\n          alert(\"Signup unsuccesfull...!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Signup unsuccesfull...!\", error);\r\n      });\r\n  };\r\n\r\n  const SignUpSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Email format is invalid\")\r\n      .required(\"Email is required\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(6, \"Password is too short - should be 6 chars minimum\"),\r\n    username: Yup.string().required(\"username is required\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={SignUpSchema}\r\n      onSubmit={submitForm}\r\n    >\r\n      {(formik) => {\r\n        const { errors, touched } = formik;\r\n        return (\r\n          <div className=\"container\">\r\n            <div className=\"signupcontainer\">\r\n              <Form className=\"signupform\">\r\n                <p className=\"signupheading\">SignUp</p>\r\n                <hr />\r\n                <div className=\"signupbody\">\r\n                  <div className=\"form-row\">\r\n                    <Field\r\n                      type=\"Name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Name\"\r\n                      className={`inputfield ${\r\n                        errors.name && touched.name ? \"input-error\" : null\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"name\"\r\n                      className=\"errormsg\"\r\n                      component=\"div\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-row\">\r\n                    <Field\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      id=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      className={`inputfield ${\r\n                        errors.email && touched.email ? \"input-error\" : null\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"email\"\r\n                      className=\"errormsg\"\r\n                      component=\"div\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"form-row\">\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      id=\"password\"\r\n                      placeholder=\"Enter password\"\r\n                      className={`inputfield ${\r\n                        errors.password && touched.password\r\n                          ? \"input-error\"\r\n                          : null\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      className=\"errormsg\"\r\n                      name=\"password\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-row\">\r\n                    <Field\r\n                      type=\"username\"\r\n                      name=\"username\"\r\n                      id=\"username\"\r\n                      placeholder=\"Enter username\"\r\n                      className={`inputfield ${\r\n                        errors.username && touched.username\r\n                          ? \"input-error\"\r\n                          : null\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      className=\"errormsg\"\r\n                      name=\"username\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"check-box\">\r\n                  <Field type=\"checkbox\" name=\"is_staff\" />\r\n                    <label htmlFor=\"is_staff\">Are you a staff ?</label>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text\">\r\n                      Already have an account?\r\n                      <span>\r\n                        <Link to=\"/login\" className=\"signuplink\">\r\n                          Login here\r\n                        </Link>\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n\r\n                  <Button type=\"submit\" className=\"signupbutton\">\r\n                    SignUp\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Moviedetail\\Moviedetail.jsx",["85","86"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport \"./Moviedetail.css\";\r\nconst MovieDetail = () => {\r\n  const { id } = useParams();\r\n  const [movie, setMovie] = useState([]);\r\n  const username = localStorage.getItem(\"username\"); // Retrieve username from localStorage\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  useEffect(() => {\r\n    // Fetch movie data from the API using the provided ID\r\n    fetch(`http://127.0.0.1:8000/project/movies/${id}/`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })// Update the API endpoint\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setMovie(data); // Assuming data is the movie object\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n  }, [id]);\r\n\r\n  if (!movie) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"movie-card\">\r\n      <div className=\"movie-image\">\r\n        <img src={movie.image} alt={movie.title} />\r\n      </div>\r\n      <hr />\r\n      <div className=\"movie-details\">\r\n        <h2>{movie.title}</h2>\r\n        <p>Genre: {movie.genre}</p>\r\n        <p>Language: {movie.language}</p>\r\n        <p>Rating: {movie.rating}</p>\r\n        <p>Director: {movie.director}</p>\r\n        <p>Movie Length: {movie.movie_length} minutes</p>\r\n        <Link to={`/movie/${id}/seats/`} className=\"book-now-button\">\r\n          Book Now\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetail;\r\n","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Navbar\\Navbar.jsx",[],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\SeatBooking\\SeatBooking.jsx",["87","88","89","90"],[],"C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\Ticket\\Ticket.jsx",["91","92"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"./Ticket.css\";\r\n\r\nfunction Ticket() {\r\n  const { id } = useParams();\r\n  const [bookingData, setBookingData] = useState(null);\r\n  const [isTicketSaved, setIsTicketSaved] = useState(false);\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n  const username = localStorage.getItem(\"username\");\r\n\r\n  useEffect(() => {\r\n    // Fetch booking data based on bookingId from your API\r\n    fetch(`http://127.0.0.1:8000/project/booking-confirmation/${id}/`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setBookingData(data); // Assuming data contains booking details\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching booking data:\", error);\r\n      });\r\n  }, [id]);\r\n\r\n  const generatePDF = () => {\r\n    if (bookingData) {\r\n      // Create a new PDF document\r\n      const doc = new jsPDF();\r\n\r\n      // Define content for the ticket\r\n      const content = `\r\n      Ticket Details\r\n      ---------------\r\n      Booking ID: ${bookingData.id}\r\n      Category: ${\r\n        bookingData.category || \"N/A\"\r\n      } // Use 'N/A' as a fallback for null\r\n      Movie Name: ${bookingData.movie}\r\n      Theater ID: ${bookingData.theater}\r\n      Seat Number(s): ${bookingData.seat_number.split(\", \").join(\", \")} // Parse seat_number as JSON\r\n      Price: ${parseFloat(bookingData.price).toFixed(\r\n        2\r\n      )} Rs // Parse and format the price\r\n    `;\r\n\r\n      // Add content to the PDF\r\n      doc.text(content, 10, 10);\r\n\r\n      // Save the PDF with a unique name\r\n      const fileName = `Ticket_${bookingData.id}.pdf`;\r\n      doc.save(fileName);\r\n\r\n      // Set the ticket as saved\r\n      setIsTicketSaved(true);\r\n    }\r\n  };\r\n\r\n  const saveTicketData = async () => {\r\n    try {\r\n      if (bookingData) {\r\n        // Create an object with the correct property names for the POST request\r\n        const ticketDataToSave = {\r\n          booking: bookingData.id,\r\n          movie_name: bookingData.movie,\r\n          category: bookingData.category || \"N/A\", // Use 'N/A' as a fallback for null\r\n          theater_name: `Theater ${bookingData.theater}`,\r\n          seat_numbers: bookingData.seat_number.split(\", \").join(\", \"), // Parse seat_number as JSON\r\n          total_price: parseFloat(bookingData.price).toFixed(2),\r\n          date: bookingData.date,\r\n          time: bookingData.time,\r\n        };\r\n\r\n        // Send a POST request to save the ticket data\r\n        const response = await fetch(\r\n          `http://127.0.0.1:8000/project/tickets/${id}/`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n            body: JSON.stringify(ticketDataToSave),\r\n          }\r\n        );\r\n\r\n        if (response.status === 201) {\r\n          setIsTicketSaved(true);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving ticket data:\", error);\r\n    }\r\n  };\r\n\r\n  if (!bookingData) {\r\n    return <p>Loading booking data...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"ticketform\">\r\n      <h2 className=\"ticketheading\" >Ticket Details</h2>\r\n      <hr/>\r\n      <div className=\"ticketbody\">\r\n        <p>Booking ID: {bookingData.id}</p>\r\n        <p>Category: {bookingData.category}</p>\r\n        <p>Movie Name: {bookingData.movie}</p>\r\n        <p>Theater Name: {bookingData.theater}</p>\r\n        <p>Seat Number(s): {bookingData.seat_number.split(\", \").join(\", \")}</p>\r\n        <p>Date: {bookingData.date}</p>\r\n        <p>Time: {bookingData.time}</p>\r\n        <p>Price: {parseFloat(bookingData.price).toFixed(2)} Rs</p>\r\n        {isTicketSaved ? (\r\n          <div className=\"success-message\">\r\n            <p>Ticket data saved successfully!</p>\r\n            <button onClick={generatePDF}>Download Ticket</button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <button className=\"generatebutton\" onClick={saveTicketData}>Generate & Save Ticket</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ticket;\r\n","C:\\Users\\ramya\\FSD_project\\finalproject_frontend\\src\\Components\\UserProfile\\UserProfile.jsx",["93"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"./UserProfile.css\";\r\n\r\nfunction UserProfile() {\r\n  const [userData, setUserData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const userId = localStorage.getItem(\"user_id\"); // Retrieve username from localStorage\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  useEffect(() => {\r\n    // Replace this URL with your actual API endpoint for fetching user data\r\n    fetch(`http://127.0.0.1:8000/project/users/${userId}/`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // You can also include an authorization token if needed\r\n            Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch user data\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setUserData(data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user data:\", error);\r\n        setIsLoading(false);\r\n      });\r\n  }, [userId]); // Use userId as a dependency to refetch data when it changes\r\n\r\n  const handleEditClick = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSaveClick = () => {\r\n    // Create an object with the data to be updated\r\n    const updatedUserData = {\r\n      username: userData.username, // Keep the same username\r\n      email: userData.email,\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      bio: userData.bio,\r\n      // Add any other fields that need to be updated\r\n    };\r\n\r\n    // Replace this URL with your actual API endpoint for updating user data\r\n    fetch(`http://127.0.0.1:8000/project/users/${userId}/`, {\r\n      method: \"PUT\", // Use the appropriate HTTP method (PUT, PATCH, etc.) for updating data\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n    },\r\n      body: JSON.stringify(updatedUserData),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to update user data\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((updatedData) => {\r\n        // Update the 'userData' state with the new data received from the API\r\n        setUserData(updatedData);\r\n        setIsEditing(false); // Set 'isEditing' to 'false' after a successful update\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error updating user data:\", error);\r\n        // Handle the error as needed (e.g., show an error message to the user)\r\n      });\r\n  };\r\n\r\n  const handleDeleteClick = () => {\r\n    // Replace this URL with your actual API endpoint for deleting the user's profile\r\n    fetch(`http://127.0.0.1:8000/project/users/${userId}/`, {\r\n      method: \"DELETE\", // Use the appropriate HTTP method (DELETE) for deletion\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n    },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to delete user profile\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        // Handle successful deletion, e.g., redirect to the login page\r\n        window.location.href = \"/login\"; // Replace with the actual login page URL\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting user profile:\", error);\r\n        // Handle the error as needed (e.g., show an error message to the user)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-profile\">\r\n      {isLoading ? (\r\n        <p>Loading user profile...</p>\r\n      ) : userData ? (\r\n        <>\r\n          <img\r\n            src={userData.avatar}\r\n            alt={`${userData.username}'s avatar`}\r\n            className=\"avatar\"\r\n          />\r\n          {isEditing ? (\r\n            <>\r\n              <h2>Edit Profile</h2>\r\n              <label className=\"labelname\">\r\n                <strong>Username:</strong>{\" \"}\r\n                <input\r\n                className=\"inputname\"\r\n                  type=\"text\"\r\n                  value={userData.username}\r\n                  onChange={(e) =>\r\n                    setUserData({ ...userData, username: e.target.value })\r\n                  }\r\n                />\r\n              </label>\r\n              <label className=\"labelname\">\r\n                <strong>Email:</strong>{\" \"}\r\n                <input\r\n                className=\"inputname\"\r\n                  type=\"email\"\r\n                  value={userData.email}\r\n                  onChange={(e) =>\r\n                    setUserData({ ...userData, email: e.target.value })\r\n                  }\r\n                />\r\n              </label>\r\n              <label className=\"labelname\">\r\n                <strong>First Name:</strong>{\" \"}\r\n                <input\r\n                className=\"inputname\"\r\n                  type=\"text\"\r\n                  value={userData.firstName}\r\n                  onChange={(e) =>\r\n                    setUserData({ ...userData, firstName: e.target.value })\r\n                  }\r\n                />\r\n              </label>\r\n              <label className=\"labelname\">\r\n                <strong>Last Name:</strong>{\" \"}\r\n                <input\r\n                className=\"inputname\"\r\n                  type=\"text\"\r\n                  value={userData.lastName}\r\n                  onChange={(e) =>\r\n                    setUserData({ ...userData, lastName: e.target.value })\r\n                  }\r\n                />\r\n              </label>\r\n              <label className=\"labelname\">\r\n                <strong>Bio:</strong>{\" \"}\r\n                <textarea\r\n                className=\"inputname\"\r\n                  value={userData.bio}\r\n                  onChange={(e) =>\r\n                    setUserData({ ...userData, bio: e.target.value })\r\n                  }\r\n                />\r\n              </label>\r\n              <button onClick={handleSaveClick}>Save</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <h2>{userData.username}'s Profile</h2>\r\n              <p>\r\n                <strong>Name:</strong> {userData.firstName} {userData.lastName}\r\n              </p>\r\n              <p>\r\n                <strong>Email:</strong> {userData.email}\r\n              </p>\r\n              <p>\r\n                <strong>Bio:</strong> {userData.bio}\r\n              </p>\r\n              <button className=\"buttonname\" onClick={handleEditClick}>Edit Profile</button>\r\n              <button className=\"buttonname\" onClick={handleDeleteClick}>Delete Profile</button>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>Failed to load user profile.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":18},{"ruleId":"106","severity":1,"message":"110","line":7,"column":8,"nodeType":"108","messageId":"109","endLine":7,"endColumn":14},{"ruleId":"106","severity":1,"message":"111","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":24,"column":6,"nodeType":"114","endLine":24,"endColumn":10,"suggestions":"115"},{"ruleId":"106","severity":1,"message":"116","line":27,"column":10,"nodeType":"108","messageId":"109","endLine":27,"endColumn":27},{"ruleId":"106","severity":1,"message":"117","line":30,"column":10,"nodeType":"108","messageId":"109","endLine":30,"endColumn":23},{"ruleId":"106","severity":1,"message":"118","line":31,"column":10,"nodeType":"108","messageId":"109","endLine":31,"endColumn":20},{"ruleId":"112","severity":1,"message":"119","line":106,"column":6,"nodeType":"114","endLine":106,"endColumn":23,"suggestions":"120"},{"ruleId":"106","severity":1,"message":"111","line":11,"column":9,"nodeType":"108","messageId":"109","endLine":11,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":27,"column":6,"nodeType":"114","endLine":27,"endColumn":10,"suggestions":"121"},{"ruleId":"112","severity":1,"message":"113","line":35,"column":6,"nodeType":"114","endLine":35,"endColumn":14,"suggestions":"122"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["123"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'username' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'accessToken'. Either include it or remove the dependency array.","ArrayExpression",["124"],"'selectedTheaterId' is assigned a value but never used.","'selectedMovie' is assigned a value but never used.","'totalPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["125"],["126"],["127"],"no-object-constructor",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"128","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [accessToken, id]",{"range":"135","text":"136"},"Update the dependencies array to be: [accessToken, formData, id]",{"range":"137","text":"138"},{"range":"139","text":"136"},"Update the dependencies array to be: [accessToken, userId]",{"range":"140","text":"141"},[884,888],"[accessToken, id]",[3452,3469],"[accessToken, formData, id]",[939,943],[1199,1207],"[accessToken, userId]"]